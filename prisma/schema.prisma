generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name      String
  email     String   @unique
  username  String   @unique
  password  String
  imgUrl    String
  otpValue  String
  otpExpiry DateTime
  verified  Boolean  @default(false)
  role      Role     @default(USER)
  dob       DateTime

  ratings UserRating[]
  views   View[]

  characterFavorites CharacterFavorite[]
}

model Anime {

  id               Int      @id @default(autoincrement())
  englishName      String   @unique
  japaneseName     String   @unique
  description      String
  posterUrl        String
  backgroundImgUrl String
  genres           Genre[]
  country          Country
  keywords         String[]

  seasons    Season[]
  characters Character[]

}

model Season {

  id          Int         @id @default(autoincrement())
  name        String
  seasonType  SeasonType
  episodeType EpisodeType
  views       Int         @default(0)
  status      Status      @default(UPCOMING)

  anime   Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)
  animeId Int

  studios      Studio[]
  animeSeasons AnimeSeason[]
  episodes     Episode[]
  ratings      UserRating[]

  @@unique([name, animeId])
}

model Episode {

  id        Int    @id @default(autoincrement())
  name      String
  number    Int
  videoUrl  String
  viewCount Int    @default(0)

  season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId Int

  views View[]

  @@unique([number, seasonId])
}

model AnimeSeason {

  id           Int          @id @default(autoincrement())
  seasonOfYear SeasonOfYear
  year         Int

  seasons Season[]

  @@unique([seasonOfYear, year])
}

model Studio {

  id      Int    @id @default(autoincrement())
  name    String @unique
  logoUrl String

  seasons Season[]

}

model UserRating {

  id     Int @id @default(autoincrement())
  rating Int

  rater  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId Int


  @@unique([userId, seasonId])
}

model View {

  id Int @id @default(autoincrement())

  viewer   User @relation(fields: [viewerId], references: [id], onDelete: Cascade)
  viewerId Int

  episode   Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId Int

}

model Character {

  id Int @id @default(autoincrement())

  name        String
  imgUrl      String
  description String

  vas     VA[]
  anime   Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)
  animeId Int

  characterFavorites CharacterFavorite[]

  @@unique([name, animeId])
}

model VA {

  id Int @id @default(autoincrement())

  name   String   @unique
  dob    DateTime
  more   String
  imgUrl String

  characters Character[]
}

model CharacterFavorite {

  id Int @id @default(autoincrement())

  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId Int

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int


  @@unique([characterId, userId])
}

enum Role {

  OWNER
  ADMIN
  MODERATOR
  UPLOADER
  USER

}

enum SeasonOfYear {

  WINTER
  SPRING
  SUMMER
  FALL

}

enum Genre {

  ACTION
  ADVENTURE
  AVANT_GARDE
  BOYS_LOVE
  CARS
  COMEDY
  DEMENTIA
  DEMONS
  DRAMA
  ECCHI
  FANTASY
  GAME
  GENDER_BENDER
  GIRLS_LOVE
  GOURMET
  HAREM
  HISTORICAL
  HORROR
  JOSEI
  KIDS
  MAGIC
  MARTIAL_ARTS
  MECCHA
  MILITARY
  MUSIC
  MYSTERY
  PARODY
  POLICE
  PSYCHOLOGICAL
  ROMANCE
  SAMURAI
  SCHOOL
  SCI_FI
  SEINEN
  SHOUJO
  SHOUJO_AI
  SHOUNEN
  SLICE_OF_LIFE
  SPACE
  SPORTS
  SUPER_POWER
  SUPERNATURAL
  SUSPENSE
  THRILLER
  VAMPIRE

}

enum SeasonType {

  TV_SERIES
  MOVIE
  SPECIAL
  OVA
  ONA

}

enum EpisodeType {

  SUB
  DUB

}

enum Status {

  UPCOMING
  ONGOING
  COMPLETED

}

enum Country {

  JAPAN
  CHINA
  KOREA

}
